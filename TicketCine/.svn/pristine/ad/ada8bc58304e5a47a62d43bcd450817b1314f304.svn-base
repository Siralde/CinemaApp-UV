package ticketcine.Modelo;

import java.util.ArrayList;
import java.util.Date;
import ticketcine.Controlador.Cliente;

public class Pase {
    private Date fecha;
    private Object hora;
    private float precio;
    protected ArrayList<Compra> compras = new ArrayList<Compra>();
    private Cine cine;
    private Sala sala;
    private Pelicula pelicula;
    private EstadoPase estado;
    //protected Sala salas;

    public Pase(Date _fecha, Object _hora, Sala _sala) {
        this.fecha = _fecha;
        this.hora = _hora;
        this.sala = _sala;
    }

    public float getPrecio() {
        return this.precio;
    }

    public void setPrecio(float _precio) {
        this.precio = _precio;
    }

    public Object getHora() {
        return this.hora;
    }

    public void setHora(Object _hora) {
        this.hora = _hora;
    }

    public Date getFecha() {
        return this.fecha;
    }

    public void setFecha(Date _fecha) {
        this.fecha = _fecha;
    }

    public void setPelicula(Pelicula _pelicula) {
        this.pelicula = _pelicula;
    }

    public Pelicula getPelicula() {
        return this.pelicula;
    }
    
    //He cambiado setSalas por setSala -> _salas por _sala y lo de dentro tmb he quitado las s
    public void setSala(Sala _sala) {
        this.sala = _sala;
    }

    public Sala getSala() {
        return this.sala;
    }
    
    
    public boolean coincideFechaHora(Date _fecha, Object _hora) {
	boolean coinciden = false;
        
        if(fecha == _fecha && hora == _hora)
            coinciden = true;
        
        return coinciden;
    }

    
    /**
     * 
     * Comprueba que el numero de entradas deseada por el usuario sea 
     * menor o igual al numero de asientos disponibles del pase programado
     * 
     * @param _n_entradas Numero de entradas deseadas por el usuario
     * 
     * @return el precio final del pase  
     */
    public float comprobarNumeroEntradas(int _n_entradas) {
        return estado.comprobarNumeroEntradas(_n_entradas);
    }

    /**
     * 
     * Comprueba que la pelicula elegida por el usuario
     * 
     * @param _pelicula Pelicula elegida por el usuario
     * 
     * @retval true si la pelicula esta disponible
     * @retval false si la pelicula no esta disponible
     */
    public boolean comprobarDisponibilidad(Pelicula _pelicula) {
        return estado.comprobarDisponibilidad(_pelicula);
    }

    /**
     * 
     * Comprueba si la pelicula elegida por el usuario es la misma del pase
     * Para filtrar los pases de las peliculas que quiere el cliente
     * 
     * @param _pelicula pelicula elegida por el usuario
     * 
     * @retval true Si la pelicula elegida es igual a la pelicula del pase
     * @retval false Si la pelicula elegida no es igual a la pelicula del pase
     */
    public boolean comprobarPase(Pase pase) {
            boolean res = false;
            
            if(pase.getFecha().compareTo(fecha) == 0)
            {
                if(pase.getPelicula().getTitulo().equals(pelicula.getTitulo()))
                {
                    res = true;
                }
            }
            
            return res;
	}

    /**
     * 
     * @param _pelicula Pelicula elegida por el usuario
     * 
     * @retval true Si es la misma pelicula del pase
     * @retval false Si es diferente a la pelicula del pase
     */
    public boolean comprobarPelicula(Pelicula _pelicula) {
        return this.pelicula == _pelicula;
    }
    
    public boolean confirmarCompra(float importe, int n_entradas, Cliente cliente) {
        return estado.confirmarCompra(importe, n_entradas, cliente);
    }

    public boolean addCompra(Compra nuevaCompra) {
        return compras.add(nuevaCompra);
    }

}